{"version":3,"file":"static/js/101.0bf11cc2.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/pages/Contacts.jsx","components/redux/contacts/selectors.js","components/redux/filter/selectors.js"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../redux/contacts/selectors';\nimport { addContact } from '../redux/contacts/operations';\nimport { Button, FormGroup, TextField } from '@mui/material';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.warn(`There is no input: ${name}!`);\n    }\n  };\n\n  const checkInContacts = name =>\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n  const createContact = data => {\n    const { name } = data;\n    if (checkInContacts(name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(data));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormGroup\n        sx={{\n          display: 'inline-flex',\n          gap: 1,\n          boxShadow: 1,\n          borderRadius: 2,\n          p: 2,\n          minWidth: 320,\n        }}\n      >\n        <TextField\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <TextField\n          label=\"Number\"\n          variant=\"outlined\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </FormGroup>\n    </form>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n  min-width: 320px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactListItem } from './ContactItem.styled';\nimport { Button, Typography } from '@mui/material';\nimport { deleteContact } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <ContactListItem>\n      <Typography marginRight={'auto'}>{name}:</Typography>\n      <Typography>{number}</Typography>\n      <Button\n        variant=\"contained\"\n        onClick={onDeleteContact}\n        disabled={isLoading}\n      >\n        Delete\n      </Button>\n    </ContactListItem>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n`;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { Contacts } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <Contacts>\n      {contacts.length > 0 &&\n        contacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n    </Contacts>\n  );\n};\n","import { setFilter } from '../redux/filter/slice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../redux/filter/selectors';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const { filter } = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleSetFilter = e => {\n    const value = e.target.value;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <TextField\n      label=\"Find contacts by name\"\n      variant=\"outlined\"\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleSetFilter}\n    />\n  );\n};\n","import { Typography } from '@mui/material';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectContacts, selectIsLoading } from '../redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Typography variant=\"h3\">Contacts</Typography>\n      {contacts.length === 0 && !isLoading && <h2>You have no contacts</h2>}\n      {contacts.length > 0 && <Filter />}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","export const selectFilter = state => state.filter.filter;\n"],"names":["ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","selectContacts","dispatch","useDispatch","handleChange","e","target","value","console","warn","createContact","data","some","contact","toLowerCase","checkInContacts","addContact","alert","reset","onSubmit","preventDefault","FormGroup","sx","display","gap","boxShadow","borderRadius","p","minWidth","TextField","label","variant","type","onChange","pattern","title","required","Button","ContactListItem","styled","ContactItem","id","isLoading","selectIsLoading","Typography","marginRight","onClick","deleteContact","disabled","Contacts","ContactList","selectVisibleContacts","length","map","Filter","filter","selectFilter","setFilter","useEffect","fetchContacts","state","items","createSelector","includes"],"sourceRoot":""}